env NGX_HOME;
http {
    include       mime.types;
    default_type  application/octet-stream;

	#reuse_port on;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $request_time $upstream_response_time "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_MQTT_REGIST"';

    access_log  logs/access.log  main buffer=1;

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  30;
	proxy_connect_timeout 90;
	proxy_send_timeout 90;
	proxy_read_timeout 90;

	server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
	client_body_buffer_size 32k;
    client_max_body_size 8m;

    #gzip  on;	

	bizlog on;
	bizlog_level debug2;
	bizlog_debug_file logs/bizdebug.log;
	bizlog_file logs/bizinfo.log; 	

	lua_package_path '/usr/local/thirdparty/lualib/?.lua;./lib/?.lua;;';
    lua_package_cpath '/usr/local/thirdparty/luajit/?.so;/usr/local/thirdparty/lualib/?.so;./lib/?.so;;';

	lua_shared_dict MQTT_CLIENT_DICT 20m;
	lua_shared_dict MQTT_CLIENT_TMP_DICT 20m;
	lua_shared_dict MQTT_TOPIC_DICT 20m;
	lua_shared_dict MQTT_TOPIC_EXT_DICT 20m;
	lua_shared_dict MQTT_MSG_STORE_DICT 20m;
	lua_shared_dict MQTT_MSG_SEQUENCE_DICT 20m;
	lua_shared_dict MQTT_OUTSTANDING_STORE_DICT 20m;
	lua_shared_dict MQTT_TOPIC_QUEUE_DICT 20m;
	lua_shared_dict MQTT_SRV_STATUS_DICT 1m;


	#lua_code_cache off;

	init_by_lua '
		require "resty.core"
		lrucache = require "resty.lrucache"
		upload = require "resty.upload"
		libconf = require "../config"
		libchash = require "lib.chash"
		libutility = require "lib.Utility"
		libmqttkit = require "nginx.mqtt_kit"

		ffi = require("ffi")

		ffi.cdef[[
		bool ngx_mqtt_topic_is_expression(const unsigned char *topic);
		bool ngx_mqtt_topic_wildcard_match(const unsigned char *topic, int topLen, const unsigned char *search,int seachLen);
		int ngx_ffi_mqtt_offset_process(const unsigned char *zoneName,const unsigned char *data,int d_len);
		int ngx_lua_ffi_shdict_lpush(const unsigned char *zone,const unsigned char *key, const unsigned char *_value,int len);
		int ngx_lua_ffi_shdict_rpush(const unsigned char *zone,const unsigned char *key, const unsigned char *_value,int len);
		typedef struct {
		    size_t      len;
		    unsigned char     *data;
		} ngx_str_t;
		int ngx_lua_ffi_shdict_lpop(const unsigned char *zone,const unsigned char *key, ngx_str_t *out);
		int ngx_lua_ffi_shdict_rpop(const unsigned char *zone,const unsigned char *key, ngx_str_t *out);
		]]

		MQTT = require "mqtt.mqtt"
		MQTT.semaphore = require "ngx.semaphore"
		MQTT.wsserver = require "resty.websocket.server"
		MQTT.customsvr = require"mqtt.mqtt_server_module"
		MQTT.subscribeStore=lrucache.new(100000)

		MQTT.configure = libconf:new()
		MQTT.upsName=MQTT.configure.SRV_REGIST_UPS_NAME
		MQTT.chash = libchash:new()

    ';

	disable_accept_worker_id 0;
	init_worker_by_lua_file lib/mqtt/mqtt_init_by_worker.lua;

	mqtt_server_id 1;

	upstream ups_cfgsrv {
		server 192.168.100.213:7000;
		server 192.168.100.213:7001 backup;
		keepalive 32;
        check interval=3000 rise=2 fall=5 timeout=5000 type=http;
        check_http_send "HEAD /index.html HTTP/1.0\r\nConnection: keep-alive\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
	}

	upstream ups_mqttservice {
		server 192.168.100.213:7000;
		server 192.168.100.213:7001;
		keepalive 32;
        check interval=3000 rise=2 fall=5 timeout=5000 type=http;
        check_http_send "HEAD /index.html HTTP/1.0\r\nConnection: keep-alive\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
	}

	server {
        listen       1883;

		location /mqtt {

			proxy_http_version 1.1;
			lua_socket_log_errors off;
			lua_check_client_abort on;
			lua_socket_pool_size 80000;
			lua_socket_connect_timeout 30s;
			lua_socket_keepalive_timeout 60s;
			lua_socket_read_timeout 60s;
			lua_socket_send_timeout 60s;
            content_by_lua_file lib/mqtt/mqtt_ws_server.lua;
            #mqtt_shared_memory_size 200m;

        }

		location /mqttconsole {
			client_body_buffer_size 1m;
			client_max_body_size 8m;
			chunked_transfer_encoding off;
			content_by_lua_file mqtt_topic_manage.lua;
		}

		location /get_mqttaddr {
			default_type  application/txt;
			chunked_transfer_encoding off;
			content_by_lua '
				local method_name = ngx.req.get_method()
				if(method_name ~= "GET") then
					ngx.exit(ngx.HTTP_BAD_REQUEST)
				end
				local args = ngx.req.get_uri_args()
				local clientId=args["cId"]
				if(clientId == nil) then
					ngx.exit(ngx.HTTP_BAD_REQUEST)
				end
				local hash = ngx.crc32_long(clientId)
				local bucket = hash % 1024 % 1
				ngx.say(MQTT_BROKER_ADDRESS[bucket+1])
			';
		}
	}

	server {
        listen       4000;

		location /notify {
			access_log  logs/access_notify.log;
			client_body_buffer_size 1m;
			client_max_body_size 8m;
			chunked_transfer_encoding off;
			content_by_lua_file lib/mqtt/mqtt_notify_ws_wrapper.lua;
		}
	}

	server {
        listen       4001;

		location /mqtt_srvchg/get {
			access_log  logs/access_srvchg.log;
			proxy_connect_timeout 1s;
			proxy_pass http://ups_cfgsrv;
		}
	}

	server {
        listen       4002;

		location /mqtt-service {
			access_log  logs/access_svc.log;
			proxy_connect_timeout 1s;
			proxy_pass http://ups_mqttservice;
		}
	}

}
