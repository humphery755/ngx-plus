stream {
	lua_shared_dict MQTT_CLIENT_DICT 20m;
	lua_shared_dict MQTT_CLIENT_TMP_DICT 20m;
	lua_shared_dict MQTT_TOPIC_DICT 20m;
	lua_shared_dict MQTT_TOPIC_EXT_DICT 20m;
	lua_shared_dict MQTT_MSG_STORE_DICT 20m;
	lua_shared_dict MQTT_MSG_SEQUENCE_DICT 20m;
	lua_shared_dict MQTT_OUTSTANDING_STORE_DICT 20m;
	lua_shared_dict MQTT_TOPIC_QUEUE_DICT 20m;
	lua_shared_dict MQTT_SRV_STATUS_DICT 1m;

	init_by_lua_block {

		lrucache = require "resty.lrucache"
		libconf = require "config"
		libchash = require "lib.chash"
		libutility = require "lib.Utility"
		libmqttkit = require "nginx.mqtt_kit"

		ffi = require("ffi")

		ffi.cdef[[
		bool ngx_mqtt_topic_is_expression(const unsigned char *topic);
		bool ngx_mqtt_topic_wildcard_match(const unsigned char *topic, int topLen, const unsigned char *search,int seachLen);
		int ngx_ffi_mqtt_offset_process(const unsigned char *zoneName,const unsigned char *data,int d_len);
		int ngx_lua_ffi_shdict_lpush(const unsigned char *zone,const unsigned char *key, const unsigned char *_value,int len);
		int ngx_lua_ffi_shdict_rpush(const unsigned char *zone,const unsigned char *key, const unsigned char *_value,int len);
		typedef struct {
		    size_t      len;
		    unsigned char     *data;
		} ngx_str_t;
		int ngx_lua_ffi_shdict_lpop(const unsigned char *zone,const unsigned char *key, ngx_str_t *out);
		int ngx_lua_ffi_shdict_rpop(const unsigned char *zone,const unsigned char *key, ngx_str_t *out);
		]]

		MQTT = require "lib.mqtt.mqtt"
		MQTT.semaphore = require "lib.stream.semaphore"
		MQTT.wsserver = require "mqtt_tcp_adapter"
		MQTT.customsvr = require"mqtt_server_module"
		MQTT.subscribeStore=lrucache.new(100000)

		MQTT.configure = libconf:new()
		MQTT.upsName=MQTT.configure.SRV_REGIST_UPS_NAME
		MQTT.chash = libchash:new()
    }

	disable_accept_worker_id 0;
    init_worker_by_lua_file mqtt_init_by_worker.lua;

    mqtt_push on;
	mqtt_server_id 1;

	upstream ups_cfgsrv {
		server 192.168.100.213:7000;
		server 192.168.100.213:7001 backup;
	}

	upstream ups_mqttservice {
		server 192.168.100.213:7000;
		server 192.168.100.213:7001;
	}

	server {
		listen 1883;

		proxy_download_rate 5120;
		#proxy_upload_rate 1;
		proxy_connect_timeout 1s;
		proxy_timeout 7s;
		lua_socket_log_errors off;
		lua_check_client_abort on;
		lua_socket_pool_size 80000;
		lua_socket_connect_timeout 30s;
		lua_socket_keepalive_timeout 60s;
		lua_socket_read_timeout 60s;
		lua_socket_send_timeout 60s;
        content_by_lua_file mqtt_tcp_server.lua;
	}

	server {
		listen 4000;

		proxy_download_rate 5120;
		#proxy_upload_rate 1;
		proxy_connect_timeout 1s;
		proxy_timeout 7s;
		lua_socket_log_errors off;
		lua_check_client_abort on;
		lua_socket_pool_size 80000;
		lua_socket_connect_timeout 30s;
		lua_socket_keepalive_timeout 60s;
		lua_socket_read_timeout 60s;
		lua_socket_send_timeout 60s;
        content_by_lua_file mqtt_notify_tcp_wrapper.lua;
	}

	server {
		listen 3333;
        content_by_lua_block {
            local sock = assert(ngx.req.socket(true))
            local topic = sock:receive()  -- read a line from downstream
            local shm = ngx.shared.MQTT_TOPIC_DICT
			local data = shm:get(topic)
            ngx.say(topic..": "..data)
        }
	}

	server {
		listen 4001;
		proxy_connect_timeout 1s;
		proxy_timeout 7s;
		proxy_pass ups_cfgsrv;
	}
	server {
		listen 4002;
		proxy_connect_timeout 1s;
		proxy_timeout 7s;
		proxy_pass ups_mqttservice;
	}
}
processes {
	process lua_shdict_backup {
		backup_path ./data;
		backup_shdict_names MQTT_CLIENT_DICT;
		backup_shdict_names MQTT_TOPIC_DICT;
		backup_shdict_names MQTT_TOPIC_EXT_DICT;
		backup_settimer "18:00:00";
	}
}
