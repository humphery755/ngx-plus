# realserver,2Ì¨4001, 4002, 4003
upstream test_sticky {
	sticky name=r;
	server 127.0.0.1:4002;
	server 127.0.0.1:4003;
	server 127.0.0.1:4004;
#	server www.uhomecp.com:80;
	#server 120.24.82.71:10080;
	keepalive 1000;
	check interval=5000 rise=2 fall=5 timeout=4000 type=http;
	check_http_send "HEAD / HTTP/1.0\r\n\r\n";
	check_http_expect_alive http_2xx http_3xx;
}

upstream test_backup {
	server 127.0.0.1:4002;
	server 127.0.0.1:4003 backup;
	server 127.0.0.1:4004 backup;
	keepalive 1000;
	check interval=5000 rise=2 fall=5 timeout=4000 type=http;
	check_http_send "HEAD / HTTP/1.0\r\n\r\n";
	check_http_expect_alive http_2xx http_3xx;
}

map $http_x_forwarded_for  $limit_key_demo1 {
    ""    $remote_addr$uri;
    ~^(?P<firstAddr>[0-9\.]+),?.*$    $firstAddr$uri;
}
map $http_x_forwarded_for  $limit_key_demo2 {
    ""    $remote_addr$request_uri;
    ~^(?P<firstAddr>[0-9\.]+),?.*$    $firstAddr$request_uri;
}

limit_req_zone $clientRealIp zone=one:3m rate=1r/s;
limit_req_zone $limit_key_demo1 zone=two:3m rate=1r/s;
limit_req_zone $limit_key_demo2 zone=three:3m rate=1r/s;
limit_req_log_level info;
server {
	listen       4001;
	server_name  qweb1;
	
	location / {
		limit_req zone=two burst=5 nodelay;
		proxy_pass http://test_sticky;
		#echo $clientRealIp;
		proxy_read_timeout 1; 
		proxy_next_upstream http_502 http_504 error invalid_header; 
	}

	location /off {
		limit_req off;
	}

	limit_req_whitelist geo_var_name=white_ip geo_var_value=1;
}

map $http_x_forwarded_for  $clientRealIp {
    ""    $remote_addr;
    ~^(?P<firstAddr>[0-9\.]+),?.*$    $firstAddr;
}

geo $clientRealIp $white_ip {
	ranges;
	default 0;
	127.0.0.1-127.0.0.255 1;
	192.168.168.1-192.168.168.254 1;
}
server {
	listen       4004;
	server_name  qweb1;
	location / {
		limit_req off;
	    echo "stable";
	}
}
server {
	listen       4002;
	server_name  qweb2;
	location / {
		limit_req off;
	    echo "beta1";
	}
}
server {
	listen       4003;
	server_name  qweb3;
	location / {
		limit_req off;		
	    echo "beta2";
	}
}

server {
        listen       8443 ssl http2;# fastopen=3

		#openssl genrsa -des3 -out example.com_secure.key 4096
		#openssl req -new -sha256 -key example.com_secure.key -out example.com.csr
		#openssl req -new -x509 -key example.com_secure.key -out example.com_cacert.crt -days 365
		#openssl rsa -in example.com_secure.key -out example.com.key
		#openssl dhparam -out dhparam.pem 2048
		#openssl rand 48 > tls_session_ticket.key

		ssl_certificate     example.com_cacert.crt;
    	ssl_certificate_key example.com.key;
		ssl_dhparam dhparam.pem;
		ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4';
		ssl_prefer_server_ciphers on;
		#OCSP
		#ssl_stapling on;
    	#ssl_stapling_verify on;
    	#ssl_trusted_certificate /etc/nginx/cert/trustchain.crt;
    	#resolver 114.114.114 8.8.8.8 valid=300s;

		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_session_cache shared:SSL:20m;
		ssl_session_timeout 60m;
		#ssl_session_tickets on;
		#ssl_session_ticket_key tls_session_ticket.key;
		add_header Strict-Transport-Security 'max-age=63072000; includeSubDomains; preload';
		add_header X-Frame-Options SAMEORIGIN;
		add_header X-Content-Type-Options nosniff;
		add_header Public-Key-Pins 'pin-sha256="oYQpJ7NWxATnj4TXRpTIKMECkarA0lPcAblBBaV23Io="; pin-sha256="JGBhwHhyQ8RjdAiTim2KGnNegkNyBfISSuCL2YiSbTM="; max-age=2592000; includeSubDomains';

        location / {
                root html;
				proxy_pass http://119.23.161.129:8083;
        }
}